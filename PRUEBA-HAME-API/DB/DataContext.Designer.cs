//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 17/07/2024 23:16:06
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace PRUEBAHAMEContext
{

    [DatabaseAttribute(Name = "PRUEBA-HAME")]
    [ProviderAttribute(typeof(Devart.Data.SqlServer.Linq.Provider.SqlDataProvider))]
    public partial class PRUEBAHAMEDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(PRUEBAHAMEDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertCliente(Cliente instance);
        partial void UpdateCliente(Cliente instance);
        partial void DeleteCliente(Cliente instance);
        partial void InsertClienteServicio(ClienteServicio instance);
        partial void UpdateClienteServicio(ClienteServicio instance);
        partial void DeleteClienteServicio(ClienteServicio instance);
        partial void InsertServicio(Servicio instance);
        partial void UpdateServicio(Servicio instance);
        partial void DeleteServicio(Servicio instance);

        #endregion

        public PRUEBAHAMEDataContext() :
        base(@"Data Source=DESKTOP-FF9K8UH;Initial Catalog=PRUEBA-HAME;Integrated Security=True;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public PRUEBAHAMEDataContext(MappingSource mappingSource) :
        base(@"Data Source=DESKTOP-FF9K8UH;Initial Catalog=PRUEBA-HAME;Integrated Security=True;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public PRUEBAHAMEDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public PRUEBAHAMEDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public PRUEBAHAMEDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public PRUEBAHAMEDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Cliente> Clientes
        {
            get
            {
                return this.GetTable<Cliente>();
            }
        }

        public Devart.Data.Linq.Table<ClienteServicio> ClienteServicios
        {
            get
            {
                return this.GetTable<ClienteServicio>();
            }
        }

        public Devart.Data.Linq.Table<Servicio> Servicios
        {
            get
            {
                return this.GetTable<Servicio>();
            }
        }

    
        /// <summary>
        /// There are no comments for DeleteClient in the schema.
        /// </summary>
        [Function(Name=@"dbo.deleteClient")]
        public void DeleteClient([Parameter(Name="ClienteID", DbType="INT")] int? ClienteID)
        {
            IExecuteResult _DeleteClientResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ClienteID);
        }

    
        /// <summary>
        /// There are no comments for SpAddCliente in the schema.
        /// </summary>
        [Function(Name=@"dbo.sp_AddCliente")]
        public void SpAddCliente([Parameter(Name="Nombre", DbType="NVARCHAR(100)")] string Nombre, [Parameter(Name="FechaAlta", DbType="DATE")] System.DateTime? FechaAlta, [Parameter(Name="Direccion", DbType="NVARCHAR(200)")] string Direccion, [Parameter(Name="Correo", DbType="NVARCHAR(100)")] string Correo, [Parameter(Name="Telefono", DbType="NVARCHAR(20)")] string Telefono)
        {
            IExecuteResult _SpAddClienteResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), Nombre, FechaAlta, Direccion, Correo, Telefono);
        }

    
        /// <summary>
        /// There are no comments for SpAddServicio in the schema.
        /// </summary>
        [Function(Name=@"dbo.sp_AddServicio")]
        public void SpAddServicio([Parameter(Name="TipoServicio", DbType="NVARCHAR(50)")] string TipoServicio, [Parameter(Name="Costo", DbType="DECIMAL(10,2)")] decimal? Costo)
        {
            IExecuteResult _SpAddServicioResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), TipoServicio, Costo);
        }

    
        /// <summary>
        /// There are no comments for SpAsignarServicio in the schema.
        /// </summary>
        [Function(Name=@"dbo.sp_AsignarServicio")]
        public void SpAsignarServicio([Parameter(Name="ClienteID", DbType="INT")] int? ClienteID, [Parameter(Name="ServicioID", DbType="INT")] int? ServicioID, [Parameter(Name="FechaAsignacion", DbType="DATE")] System.DateTime? FechaAsignacion)
        {
            IExecuteResult _SpAsignarServicioResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ClienteID, ServicioID, FechaAsignacion);
        }

    
        /// <summary>
        /// There are no comments for UpdateClient in the schema.
        /// </summary>
        [Function(Name=@"dbo.updateClient")]
        public void UpdateClient([Parameter(Name="ClienteID", DbType="INT")] int? ClienteID, [Parameter(Name="Nombre", DbType="NVARCHAR(100)")] string Nombre, [Parameter(Name="FechaAlta", DbType="DATE")] System.DateTime? FechaAlta, [Parameter(Name="Direccion", DbType="NVARCHAR(200)")] string Direccion, [Parameter(Name="Correo", DbType="NVARCHAR(100)")] string Correo, [Parameter(Name="Telefono", DbType="NVARCHAR(20)")] string Telefono)
        {
            IExecuteResult _UpdateClientResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ClienteID, Nombre, FechaAlta, Direccion, Correo, Telefono);
        }

    
        /// <summary>
        /// There are no comments for GetServicesByClientID in the schema.
        /// </summary>
        [Function(Name=@"dbo.getServicesByClientID")]
        public Devart.Data.Linq.ISingleResult<GetServicesByClientIDResult> GetServicesByClientID([Parameter(Name="ClienteID", DbType="INT")] int? ClienteID)
        {
            IExecuteResult _GetServicesByClientIDResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ClienteID);
            return ((Devart.Data.Linq.ISingleResult<GetServicesByClientIDResult>)(_GetServicesByClientIDResult.ReturnValue));
        }
    }
}

namespace PRUEBAHAMEContext
{

    /// <summary>
    /// There are no comments for PRUEBAHAMEContext.Cliente in the schema.
    /// </summary>
    [Table(Name = @"dbo.Clientes")]
    public partial class Cliente : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ClienteID;

        private string _Nombre;

        private System.DateTime _FechaAlta;

        private string _Direccion;

        private string _Correo;

        private string _Telefono;

        private bool _Estado;
        #pragma warning restore 0649

        private EntitySet<ClienteServicio> _ClienteServicios;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnClienteIDChanging(int value);
        partial void OnClienteIDChanged();
        partial void OnNombreChanging(string value);
        partial void OnNombreChanged();
        partial void OnFechaAltaChanging(System.DateTime value);
        partial void OnFechaAltaChanged();
        partial void OnDireccionChanging(string value);
        partial void OnDireccionChanged();
        partial void OnCorreoChanging(string value);
        partial void OnCorreoChanged();
        partial void OnTelefonoChanging(string value);
        partial void OnTelefonoChanged();
        partial void OnEstadoChanging(bool value);
        partial void OnEstadoChanged();
        #endregion

        public Cliente()
        {
            this._ClienteServicios = new EntitySet<ClienteServicio>(new Action<ClienteServicio>(this.attach_ClienteServicios), new Action<ClienteServicio>(this.detach_ClienteServicios));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ClienteID in the schema.
        /// </summary>
        [Column(Storage = "_ClienteID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ClienteID
        {
            get
            {
                return this._ClienteID;
            }
            set
            {
                if (this._ClienteID != value)
                {
                    this.OnClienteIDChanging(value);
                    this.SendPropertyChanging("ClienteID");
                    this._ClienteID = value;
                    this.SendPropertyChanged("ClienteID");
                    this.OnClienteIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nombre in the schema.
        /// </summary>
        [Column(Storage = "_Nombre", CanBeNull = false, DbType = "NVARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Nombre
        {
            get
            {
                return this._Nombre;
            }
            set
            {
                if (this._Nombre != value)
                {
                    this.OnNombreChanging(value);
                    this.SendPropertyChanging("Nombre");
                    this._Nombre = value;
                    this.SendPropertyChanged("Nombre");
                    this.OnNombreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FechaAlta in the schema.
        /// </summary>
        [Column(Storage = "_FechaAlta", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime FechaAlta
        {
            get
            {
                return this._FechaAlta;
            }
            set
            {
                if (this._FechaAlta != value)
                {
                    this.OnFechaAltaChanging(value);
                    this.SendPropertyChanging("FechaAlta");
                    this._FechaAlta = value;
                    this.SendPropertyChanged("FechaAlta");
                    this.OnFechaAltaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Direccion in the schema.
        /// </summary>
        [Column(Storage = "_Direccion", CanBeNull = false, DbType = "NVARCHAR(200) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Direccion
        {
            get
            {
                return this._Direccion;
            }
            set
            {
                if (this._Direccion != value)
                {
                    this.OnDireccionChanging(value);
                    this.SendPropertyChanging("Direccion");
                    this._Direccion = value;
                    this.SendPropertyChanged("Direccion");
                    this.OnDireccionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Correo in the schema.
        /// </summary>
        [Column(Storage = "_Correo", DbType = "NVARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string Correo
        {
            get
            {
                return this._Correo;
            }
            set
            {
                if (this._Correo != value)
                {
                    this.OnCorreoChanging(value);
                    this.SendPropertyChanging("Correo");
                    this._Correo = value;
                    this.SendPropertyChanged("Correo");
                    this.OnCorreoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Telefono in the schema.
        /// </summary>
        [Column(Storage = "_Telefono", DbType = "NVARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string Telefono
        {
            get
            {
                return this._Telefono;
            }
            set
            {
                if (this._Telefono != value)
                {
                    this.OnTelefonoChanging(value);
                    this.SendPropertyChanging("Telefono");
                    this._Telefono = value;
                    this.SendPropertyChanged("Telefono");
                    this.OnTelefonoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Estado in the schema.
        /// </summary>
        [Column(Storage = "_Estado", CanBeNull = false, DbType = "BIT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Estado
        {
            get
            {
                return this._Estado;
            }
            set
            {
                if (this._Estado != value)
                {
                    this.OnEstadoChanging(value);
                    this.SendPropertyChanging("Estado");
                    this._Estado = value;
                    this.SendPropertyChanged("Estado");
                    this.OnEstadoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ClienteServicios in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Cliente_ClienteServicio", Storage="_ClienteServicios", ThisKey="ClienteID", OtherKey="ClienteID", DeleteRule="NO ACTION")]
        public EntitySet<ClienteServicio> ClienteServicios
        {
            get
            {
                return this._ClienteServicios;
            }
            set
            {
                this._ClienteServicios.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ClienteServicios(ClienteServicio entity)
        {
            this.SendPropertyChanging("ClienteServicios");
            entity.Cliente = this;
        }
    
        private void detach_ClienteServicios(ClienteServicio entity)
        {
            this.SendPropertyChanging("ClienteServicios");
            entity.Cliente = null;
        }
    }

    /// <summary>
    /// There are no comments for PRUEBAHAMEContext.ClienteServicio in the schema.
    /// </summary>
    [Table(Name = @"dbo.ClienteServicios")]
    public partial class ClienteServicio : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ClienteServicioID;

        private int _ClienteID;

        private int _ServicioID;

        private System.DateTime _FechaAsignacion;
        #pragma warning restore 0649

        private EntityRef<Servicio> _Servicio;

        private EntityRef<Cliente> _Cliente;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnClienteServicioIDChanging(int value);
        partial void OnClienteServicioIDChanged();
        partial void OnClienteIDChanging(int value);
        partial void OnClienteIDChanged();
        partial void OnServicioIDChanging(int value);
        partial void OnServicioIDChanged();
        partial void OnFechaAsignacionChanging(System.DateTime value);
        partial void OnFechaAsignacionChanged();
        #endregion

        public ClienteServicio()
        {
            this._Servicio  = default(EntityRef<Servicio>);
            this._Cliente  = default(EntityRef<Cliente>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ClienteServicioID in the schema.
        /// </summary>
        [Column(Storage = "_ClienteServicioID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ClienteServicioID
        {
            get
            {
                return this._ClienteServicioID;
            }
            set
            {
                if (this._ClienteServicioID != value)
                {
                    this.OnClienteServicioIDChanging(value);
                    this.SendPropertyChanging("ClienteServicioID");
                    this._ClienteServicioID = value;
                    this.SendPropertyChanged("ClienteServicioID");
                    this.OnClienteServicioIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ClienteID in the schema.
        /// </summary>
        [Column(Storage = "_ClienteID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ClienteID
        {
            get
            {
                return this._ClienteID;
            }
            set
            {
                if (this._ClienteID != value)
                {
                    if (this._Cliente.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnClienteIDChanging(value);
                    this.SendPropertyChanging("ClienteID");
                    this._ClienteID = value;
                    this.SendPropertyChanged("ClienteID");
                    this.OnClienteIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ServicioID in the schema.
        /// </summary>
        [Column(Storage = "_ServicioID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ServicioID
        {
            get
            {
                return this._ServicioID;
            }
            set
            {
                if (this._ServicioID != value)
                {
                    if (this._Servicio.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnServicioIDChanging(value);
                    this.SendPropertyChanging("ServicioID");
                    this._ServicioID = value;
                    this.SendPropertyChanged("ServicioID");
                    this.OnServicioIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FechaAsignacion in the schema.
        /// </summary>
        [Column(Storage = "_FechaAsignacion", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime FechaAsignacion
        {
            get
            {
                return this._FechaAsignacion;
            }
            set
            {
                if (this._FechaAsignacion != value)
                {
                    this.OnFechaAsignacionChanging(value);
                    this.SendPropertyChanging("FechaAsignacion");
                    this._FechaAsignacion = value;
                    this.SendPropertyChanged("FechaAsignacion");
                    this.OnFechaAsignacionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Servicio in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Servicio_ClienteServicio", Storage="_Servicio", ThisKey="ServicioID", OtherKey="ServicioID", IsForeignKey=true)]
        public Servicio Servicio
        {
            get
            {
                return this._Servicio.Entity;
            }
            set
            {
                Servicio previousValue = this._Servicio.Entity;
                if ((previousValue != value) || (this._Servicio.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Servicio");
                    if (previousValue != null)
                    {
                        this._Servicio.Entity = null;
                        previousValue.ClienteServicios.Remove(this);
                    }
                    this._Servicio.Entity = value;
                    if (value != null)
                    {
                        this._ServicioID = value.ServicioID;
                        value.ClienteServicios.Add(this);
                    }
                    else
                    {
                        this._ServicioID = default(int);
                    }
                    this.SendPropertyChanged("Servicio");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cliente in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Cliente_ClienteServicio", Storage="_Cliente", ThisKey="ClienteID", OtherKey="ClienteID", IsForeignKey=true)]
        public Cliente Cliente
        {
            get
            {
                return this._Cliente.Entity;
            }
            set
            {
                Cliente previousValue = this._Cliente.Entity;
                if ((previousValue != value) || (this._Cliente.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Cliente");
                    if (previousValue != null)
                    {
                        this._Cliente.Entity = null;
                        previousValue.ClienteServicios.Remove(this);
                    }
                    this._Cliente.Entity = value;
                    if (value != null)
                    {
                        this._ClienteID = value.ClienteID;
                        value.ClienteServicios.Add(this);
                    }
                    else
                    {
                        this._ClienteID = default(int);
                    }
                    this.SendPropertyChanged("Cliente");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for PRUEBAHAMEContext.Servicio in the schema.
    /// </summary>
    [Table(Name = @"dbo.Servicios")]
    public partial class Servicio : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ServicioID;

        private string _TipoServicio;

        private decimal _Costo;

        private bool? _Estado;
        #pragma warning restore 0649

        private EntitySet<ClienteServicio> _ClienteServicios;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnServicioIDChanging(int value);
        partial void OnServicioIDChanged();
        partial void OnTipoServicioChanging(string value);
        partial void OnTipoServicioChanged();
        partial void OnCostoChanging(decimal value);
        partial void OnCostoChanged();
        partial void OnEstadoChanging(bool? value);
        partial void OnEstadoChanged();
        #endregion

        public Servicio()
        {
            this._ClienteServicios = new EntitySet<ClienteServicio>(new Action<ClienteServicio>(this.attach_ClienteServicios), new Action<ClienteServicio>(this.detach_ClienteServicios));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ServicioID in the schema.
        /// </summary>
        [Column(Storage = "_ServicioID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ServicioID
        {
            get
            {
                return this._ServicioID;
            }
            set
            {
                if (this._ServicioID != value)
                {
                    this.OnServicioIDChanging(value);
                    this.SendPropertyChanging("ServicioID");
                    this._ServicioID = value;
                    this.SendPropertyChanged("ServicioID");
                    this.OnServicioIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TipoServicio in the schema.
        /// </summary>
        [Column(Storage = "_TipoServicio", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string TipoServicio
        {
            get
            {
                return this._TipoServicio;
            }
            set
            {
                if (this._TipoServicio != value)
                {
                    this.OnTipoServicioChanging(value);
                    this.SendPropertyChanging("TipoServicio");
                    this._TipoServicio = value;
                    this.SendPropertyChanged("TipoServicio");
                    this.OnTipoServicioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Costo in the schema.
        /// </summary>
        [Column(Storage = "_Costo", CanBeNull = false, DbType = "DECIMAL(10,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Costo
        {
            get
            {
                return this._Costo;
            }
            set
            {
                if (this._Costo != value)
                {
                    this.OnCostoChanging(value);
                    this.SendPropertyChanging("Costo");
                    this._Costo = value;
                    this.SendPropertyChanged("Costo");
                    this.OnCostoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Estado in the schema.
        /// </summary>
        [Column(Storage = "_Estado", DbType = "BIT", UpdateCheck = UpdateCheck.Never)]
        public bool? Estado
        {
            get
            {
                return this._Estado;
            }
            set
            {
                if (this._Estado != value)
                {
                    this.OnEstadoChanging(value);
                    this.SendPropertyChanging("Estado");
                    this._Estado = value;
                    this.SendPropertyChanged("Estado");
                    this.OnEstadoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ClienteServicios in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Servicio_ClienteServicio", Storage="_ClienteServicios", ThisKey="ServicioID", OtherKey="ServicioID", DeleteRule="NO ACTION")]
        public EntitySet<ClienteServicio> ClienteServicios
        {
            get
            {
                return this._ClienteServicios;
            }
            set
            {
                this._ClienteServicios.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ClienteServicios(ClienteServicio entity)
        {
            this.SendPropertyChanging("ClienteServicios");
            entity.Servicio = this;
        }
    
        private void detach_ClienteServicios(ClienteServicio entity)
        {
            this.SendPropertyChanging("ClienteServicios");
            entity.Servicio = null;
        }
    }

}

namespace PRUEBAHAMEContext
{

    /// <summary>
    /// There are no comments for GetServicesByClientIDResult in the schema.
    /// </summary>
    public partial class GetServicesByClientIDResult: INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _TipoServicio;

        private decimal _Costo;

        private System.DateTime _FechaAsignacion;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTipoServicioChanging(string value);
        partial void OnTipoServicioChanged();
        partial void OnCostoChanging(decimal value);
        partial void OnCostoChanged();
        partial void OnFechaAsignacionChanging(System.DateTime value);
        partial void OnFechaAsignacionChanged();
        #endregion

        public GetServicesByClientIDResult()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TipoServicio in the schema.
        /// </summary>
        [Column(Storage = "_TipoServicio", CanBeNull = false, DbType = "NVARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string TipoServicio
        {
            get
            {
                return this._TipoServicio;
            }
            set
            {
                if (this._TipoServicio != value)
                {
                    this.OnTipoServicioChanging(value);
                    this.SendPropertyChanging("TipoServicio");
                    this._TipoServicio = value;
                    this.SendPropertyChanged("TipoServicio");
                    this.OnTipoServicioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Costo in the schema.
        /// </summary>
        [Column(Storage = "_Costo", CanBeNull = false, DbType = "DECIMAL(10,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Costo
        {
            get
            {
                return this._Costo;
            }
            set
            {
                if (this._Costo != value)
                {
                    this.OnCostoChanging(value);
                    this.SendPropertyChanging("Costo");
                    this._Costo = value;
                    this.SendPropertyChanged("Costo");
                    this.OnCostoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FechaAsignacion in the schema.
        /// </summary>
        [Column(Storage = "_FechaAsignacion", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime FechaAsignacion
        {
            get
            {
                return this._FechaAsignacion;
            }
            set
            {
                if (this._FechaAsignacion != value)
                {
                    this.OnFechaAsignacionChanging(value);
                    this.SendPropertyChanging("FechaAsignacion");
                    this._FechaAsignacion = value;
                    this.SendPropertyChanged("FechaAsignacion");
                    this.OnFechaAsignacionChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
